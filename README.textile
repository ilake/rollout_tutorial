h1. Setup Tutorial for a Rails application with Git / Github / Capistrano / Ruby Enterprise / Passenger

We will be doing all of this from scratch.  I recommend you follow from scratch as well, unless you know what you're doing.

h2. Prerequisites
* Ruby installation on your local machine
* Rails installation (LAMP)
* Git installation
* Capistrano installation
* Github account
* Clean server for production (with nothing but the initial OS setup)

It will be also very helpful if you are already comfortable with basic Rails programming.  If not, then some of this may not make sense (but it should still work).

h3. My set up

NOTE: If you use a different setup, you may have slightly different commands.  There will not be many (if any) OS-specific commands used on my local machine (development), so it will be more useful to you to have match the production machine.  I have not tried this with Ubuntu 8.10 or 9.04 in production, but I imagine the differences will be minor.

* Rails version: 2.2.2
* OS: Ubuntu 8.10 (development), Ubuntu 8.04 (production)
* Db: MySQL


h2. Create a new Rails project

Here I will create an initial Rails project on my local development machine, and ensure it works.  Of course, you can do this with any Rails project, but this is the one I will use for this tutorial.

Create project:

bq. rails rollout_tutorial

Go to the rollout_toturial directory that was just created.

bq. cd rollout_tutorial

Let's see if this worked!

bq. script/server

Open your browswer and go to http://localhost:3000/
If you see the "Welcome aboard" page, then good.  If not, check that your Rails installation is setup properly.

Let's do some basic things.  For one, let's remove index.html

bq. rm public/index.html

And set up the database:

bq. mysql -u root

At the mysql prompt:

bq. create database rollout_tutorial_development;

Exit the database and let's update the project's database config file.  Open config/database.yml

bq. development:
      adapter: mysql
      database: rollout_tutorial_development
      username: root
      password:
      host: localhost

NOTE: You may need to change the username and password.

Now let's create a small application.  All this application will do is allow people to enter items into the database and see what has been entered.  I will use nifty_generators, see below Useful Links section for a link on how to install this if you do not have it.

This will create the migration files, and controllers

bq. script/generate nifty_scaffold thing title:string index new edit

Now, run the migration (if this doesn't work, make sure that you set up config/database.yml correctly):
bq. rake db:migrate

Update config/routes.rb, and add the following line

bq. map.connect '', :controller => 'things'

And then this:

bq. script/generate nifty_layout

Finally, let's check that the web application works.  If your server is still up from last time, stop it, and and then:

bq. script/server

Open your browswer and go to http://localhost:3000/
Now you should see your application and be able to add things (which will be saved to the database).

Works?  Yay!  Time to move on to the fun stuff.


h2. Git

NOTE: Git is not the same thing as Github.  Github is service that will let you store your code on their servers (not run the code, just store it).

Let's set up some version control with Git.  Install Git if you don't already have it installed (on Ubuntu 8.10, the command is sudo apt-get install git).  Check the Git link in the Useful Links section for more on Git and installation.

Now, let's initiate version control for our project.

bq. git init

You should now see .git (hidden) directory in your project.

Before we go on, let's tell git to ignore tracking certain files.  We want to do this because we don't want to track temporry files (ending with ~ on Ubuntu), log files, and some sensitive files, such as those in the config directory.  Up to you what files and directories to ignore, this example just shows the capability.  Read up more on Git to learn how to use it better.  If you're hosting your code on Github (for free), others will be able to see your files, which is why you will want to ignore some senstive files.

Create a .gitignore file in the project root.
In the file, specify what should be ignored, here is what I used:

bq. \*.log
db/schema.rb
db/schema.sql
db/sphinx/\*
\*~
tmp/\*
config/\*

Now, let's add all file first version of the project (you need the "." there)

bq. git add .

If you want to see what is scheduled for versioning, do this:

bq. git status

Time to commit (save) this.

bq. git commit -m "First commit"

Done!


h2. Github

OK, so we already have version control with Git locally on our local computer.  Which, for most people may be good enough.  But, let's do more, and host our code repository on Github.

Create a Github account.  Done?

h3. Github account settings

Once your account is set up, you need to take a few steps in order to use it.

* Click on profile, and save your name.  You will need to have git set up with the same name locally (we will do this shortly).
* Click on account and ensure the email address you used here is the same one you will want to use with git locally (will do this shortly as well).

We need to add an SSH key.  Assuming you have not done this yet, here are the steps.
On your local machine (you may need to install SSH first):

bq. ssh-keygen

Follow the steps (for this example you can just hit enter and accept all default values).

To see if it worked, do this:

bq. cat id_rsa.pub

That should show you the public SSH key.  Copy this, and go to your Github account.

* Add this key as your public SSH key (see account page).


h3. Creating a Github repository

* Click on dashboard
* Click on create a new one
* Name your project the same name as our Rails project "rollout_tutorial"
* Click on create repository

You should now see a setup page.  Most of these things we can ignore.

Here is what you need for now:

bq. git config --global user.name "name"
    git config --global user.email email
    
When this will do is set your git global name and email (on your local machine).  Make sure these are the name and emails you want to use, and copy and paste in your local terminal.

After, you've done that, let's check that we can connect to Github via SSH.

bq. ssh git@github.com

If successful, you will see a message telling you that you have been authenticated.  If not, go back an make sure you have set up the Github account settings as described above.

Works?  Let's move on.

We have already create a rails application and used git to save it.  So all we need to do now are the following lines (replace my username with yours in the first line):

bq. git remote add origin git@github.com:monolith/rollout_tutorial.git
    git push origin master
    
Go back to the Github project page and click on Continue (or refresh on your project).

You should now see the code there!  And some details on when you last saved the changes.

h3. Just to be sure...

Let's make an update to one of your files.  On your local machine, open the README file in the rollout_tutorial directory, and change it.  For example, at the following line at the top:

bq. Hello world

Save the file.

You will need to learn how to use Git to learn how to use version control, add and remove files, etc.  But that is not the purpose of this tutorial.  So, since we just updated the README file, let's make sure we can send that change to Github.  Here's how to do that.

While we saved the README file, we did not add it to our latest version with Git.  You would use this command regardless of Github.  This is simply to commit the changes you made to the latest in your local repository.

bq. git commit -a -m "Updated README"

Finally, let's push these changes to Github:

bq. git push origin master

In your browser, go back to your project (or refresh).  You should see the files, and you should also see that the README file was just updated, with a commit comment we added above "Updated README" ... click on the file in your browser.  You should see your changes there!

Worked?  Then, this part is done.


h2. Useful Links

h3. Nifty generators

http://github.com/ryanb/nifty-generators/tree/master

h3. Git

http://git-scm.com/

h3. Github
(you're here!)

h3. Capistrano

h3. Ruby Enterprise
http://www.rubyenterpriseedition.com/

h3. Passenger



http://www.softiesonrails.com/2007/4/5/the-absolute-moron-s-guide-to-capistrano

